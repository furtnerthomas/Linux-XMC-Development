package Model.APPS.ETH_LWIP.v4_0_10.Templates;

import Model.APPS.ETH_LWIP.v4_0_10.ETH_LWIP

out.print("""
/**
 * @cond
 ***********************************************************************************************************************
 *
 * Copyright (c) 2015, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2016-01-14:
 *     - Initial version for DAVEv4.
 *
 * @endcond
 *
 */
/***********************************************************************************************************************
 * HEADER FILES
 **********************************************************************************************************************/
#include "eth_lwip.h"
""")

for(ETH_LWIP eth_lwip_inst : appInstancesList)
{
	if(eth_lwip_inst.gcheck_debug_en.value || eth_lwip_inst.gcheck_assert_en.value || eth_lwip_inst.gcheck_statistics_en.value)
	{
		out.print("""
#include <stdarg.h>
""")
	}
	String eth_lwip_name = eth_lwip_inst.getInstanceLabel()


out.print("""

ETH_LWIP_t ${eth_lwip_name} =
{
  .initialized = false
};""")

/*If debugging is enabled, generate a function to emulate printf*/
if(eth_lwip_inst.gcheck_debug_en.value || eth_lwip_inst.gcheck_statistics_en.value || eth_lwip_inst.gcheck_assert_en.value)
{
	out.print("""
void ${eth_lwip_name}_debug_msg(const char* msg, ...)
{
  va_list msg_var;
  va_start(msg_var, msg);
  (void)SEGGER_RTT_printf(0U,msg);
  (void)SEGGER_RTT_printf(0U,"\\r");
  va_end(msg_var);
}
""")
}

/*Dummy read of bitfields*/
def Dummy_Mux_Read
Dummy_Mux_Read = eth_lwip_inst.hwres_nvic_node.getRegValue("iser","iser_setena")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_rdv.getRegValue("pdisc","pdisc_pdis")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_rxer.getRegValue("pdisc","pdisc_pdis")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_rxd0.getRegValue("pdisc","pdisc_pdis")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_rxd1.getRegValue("pdisc","pdisc_pdis")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_rx_clk.getRegValue("pdisc","pdisc_pdis")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_mdc.getRegValue("pdisc","pdisc_pdis")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_mdio.getRegValue("pdisc","pdisc_pdis")

Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_rdv.getRegValue("hwsel","hwsel_hw")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_rxer.getRegValue("hwsel","hwsel_hw")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_rxd0.getRegValue("hwsel","hwsel_hw")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_rxd1.getRegValue("hwsel","hwsel_hw")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_rx_clk.getRegValue("hwsel","hwsel_hw")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_mdc.getRegValue("hwsel","hwsel_hw")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_mdio.getRegValue("hwsel","hwsel_hw")
if(eth_lwip_inst.gcombo_mii_interface_mode.value == "MII")
{
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_crs.getRegValue("pdisc","pdisc_pdis")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_cd.getRegValue("pdisc","pdisc_pdis")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_rxd2.getRegValue("pdisc","pdisc_pdis")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_rxd3.getRegValue("pdisc","pdisc_pdis")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_tx_clk.getRegValue("pdisc","pdisc_pdis")

Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_crs.getRegValue("hwsel","hwsel_hw")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_cd.getRegValue("hwsel","hwsel_hw")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_rxd2.getRegValue("hwsel","hwsel_hw")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_rxd3.getRegValue("hwsel","hwsel_hw")
Dummy_Mux_Read = eth_lwip_inst.hwres_eth_port_tx_clk.getRegValue("hwsel","hwsel_hw")
}

}


	
	