/**
 * @file eth_lwip.h
 * @date 2016-01-14
 *
 * NOTE:
 * This file is generated by DAVE. Any manual modification done to this file will be lost when the code is regenerated.
 *
 * @cond
 ***********************************************************************************************************************
 * ETH_LWIP v4.0.10 - Initializes LWIP stack.
 *
 * Copyright (c) 2015-2016, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2015-01-14:
 *     - Initial version for DAVEv4
 *
 * @endcond
 *
 */

/***********************************************************************************************************************
 * HEADER FILES
 **********************************************************************************************************************/
#ifndef ETH_LWIP_H_
#define ETH_LWIP_H_

#include "eth_lwip_conf.h"
#include <DAVE_common.h>
#include "xmc_eth_mac.h"
#include "lwip/include/lwip/tcp.h"
#include "lwip/include/lwip/udp.h"
#include "lwip/include/lwip/api.h"
#include "lwip/include/lwip/sockets.h"

/**********************************************************************************************************************
 * MACROS
 **********************************************************************************************************************/
#if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
       (XMC_LIB_MINOR_VERSION >= 1U) && \
       (XMC_LIB_PATCH_VERSION >= 8U)))
#error "ETH_LWIP APP requires XMC Peripheral Library v2.1.8 or higher"
#endif

/**********************************************************************************************************************
 * ENUMS
 **********************************************************************************************************************/
/**
 * @ingroup ETH_LWIP_enumerations
 * @{
 */

/**
 * @brief Enum to describe the possible status values, returned
 *  by ETH_LWIP init API.
 */
typedef enum ETH_LWIP_STATUS
{
  ETH_LWIP_STATUS_SUCCESS = 0U, /**< Status Success if initialization is successful */
  ETH_LWIP_STATUS_FAILURE  /**< Status Failure if initialization is failed */
} ETH_LWIP_STATUS_t;

/**
 * @brief Enum to indicate runtime error.
 */
typedef enum ETH_LWIP_ERROR
{
  ETH_LWIP_ERROR_NONE,          /**< No error*/
  ETH_LWIP_ERROR_PHY_BUSY,      /**< PHY is busy*/
  ETH_LWIP_ERROR_PHY_ERROR,     /**< PHY status error*/
  ETH_LWIP_ERROR_PHY_DEVICE_ID, /**< Wrong PHY ID used*/
  ETH_LWIP_ERROR_PHY_TIMEOUT    /**< PHY read failed*/
}ETH_LWIP_ERROR_t;
/**
 * @}
 */

/**
 * @ingroup ETH_LWIP_datastructures
 * @{
 */
/**
 * @brief Handler structure with pointer to initialization function.
 */
typedef struct ETH_LWIP
{
  XMC_ETH_MAC_t *eth_mac;        /**< Pointer to the ETH peripheral driver structure */
  struct netif *xnetif;          /**< Pointer to lwIP network interface structure */
  bool initialized;              /**< Indicates if the APP instance is initialized */
} ETH_LWIP_t;

/**
 * @}
 */

/***********************************************************************************************************************
 * API Prototypes
 **********************************************************************************************************************/

#ifdef __cplusplus
extern "C" {
#endif
/**
 * @ingroup ETH_LWIP_apidoc
 * @{
 */

/**
 * @brief API to retrieve the version of the ETH_LWIP APP.
 * @param None
 * @return DAVE_APP_VERSION_t Structure containing major version, minor version
 *         and patch version.<br>
 *
 * Example Usage:
 * @code
 * #include <DAVE.h>
 * //Example below, executes periodic lwIP function only if the version of the ETH_LWIP APP is v4.0.x
 * //Value of x can be anything.
 * int main(void)
 * {
 *   ETH_LWIP_STATUS_t init_status;
 *   DAVE_APP_VERSION_t eth_lwip_version;
 *
 *   init_status = ETH_LWIP_Init(&ETH_LWIP_0);
 *   if(init_status == ETH_LWIP_STATUS_SUCCESS)
 *   {
 *     eth_lwip_version = ETH_LWIP_GetAppVersion();
 *
 *     //Check the APP version
 *     if((eth_lwip_version.major == 4) &&
 *       (eth_lwip_version.minor == 0))
 *     {
 *       //Periodic function
 *       while(1)
 *       {
 *         sys_check_timeouts();
 *       }
 *     }
 *   }
 *   else
 *   {
 *     XMC_DEBUG("main: Application initialization failed");
 *     while(1U)
 *     {
 *     }
 *   }
 *   return 1U;
 * }
 *
 *  @endcode
 */
DAVE_APP_VERSION_t ETH_LWIP_GetAppVersion(void);

/**
 * @brief API to initialize the LWIP software stack.
 *
 * @param  handle ETH_LWIP APP handle pointer of type ETH_LWIP_t*
 *
 * @return  ETH_LWIP_STATUS_t<br>
 *          ETH_LWIP_STATUS_SUCCESS: for successful LWIP initialization.<BR>
 *          ETH_LWIP_STATUS_FAILURE: If LWIP initialization fails.<BR>
 *
 * Example Usage:
 * @code
 * #include <DAVE.h>
 * //Example below, executes periodic lwIP function after initializing ETH_LWIP APP.
 * int main(void)
 * {
 *   ETH_LWIP_STATUS_t init_status;
 *
 *   init_status = ETH_LWIP_Init(&ETH_LWIP_0);
 *   if(init_status == ETH_LWIP_STATUS_SUCCESS)
 *   {
 *       //Periodic function
 *       while(1)
 *       {
 *         sys_check_timeouts();
 *       }
 *   }
 *   else
 *   {
 *     XMC_DEBUG("main: Application initialization failed");
 *     while(1U)
 *     {
 *     }
 *   }
 *   return 1U;
 * }
 *
 *  @endcode
 */
ETH_LWIP_STATUS_t ETH_LWIP_Init(ETH_LWIP_t* handle);

/**
 * @brief Error handler function.
 *
 * @param  error_code Code representing error \ref ETH_LWIP_ERROR_t .
 *
 * @return  None
 *
 * Description:<br>
 * The APP provides a weak definition for this function where it waits forever when there is an error at runtime.
 * This function can be re-implemented in the application to capture the error.
 */
void ETH_LWIP_Error (ETH_LWIP_ERROR_t error_code);

/**
 * @brief Polling function to be used when polling is enabled in the APP UI.
 *
 * @return  None
 *
 * Description:<br>
 * When polling is enabled in the Network Interface tab of the APP, the interrupt handling will be disabled.
 * To propagate the received data, this function should be executed as an idle task function.
 *
 * Example Usage:
 * @code
 * #include <DAVE.h>
 * //Pre-condition: Enable polling in Network Interface tab.
 * //Example below, executes periodic lwIP function after initializing ETH_LWIP APP.
 * int main(void)
 * {
 *   ETH_LWIP_STATUS_t init_status;
 *
 *   init_status = ETH_LWIP_Init(&ETH_LWIP_0);
 *   if(init_status == ETH_LWIP_STATUS_SUCCESS)
 *   {
 *       //Periodic function
 *       while(1)
 *       {
 *         ETH_LWIP_Poll();
 *         sys_check_timeouts();
 *       }
 *   }
 *   else
 *   {
 *     XMC_DEBUG("main: Application initialization failed");
 *     while(1U)
 *     {
 *     }
 *   }
 *   return 1U;
 * }
 *
 *  @endcode
 */
void ETH_LWIP_Poll (void);
/**
 * @}
 */
#ifdef __cplusplus
}
#endif
#include "eth_lwip_extern.h"

#endif
