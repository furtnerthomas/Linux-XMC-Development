package Model.APPS.ETH_LWIP.v4_0_10.Templates;

import Model.APPS.ETH_LWIP.v4_0_10.ETH_LWIP

out.print("""
/*
 * Copyright (c) 2001-2003 Swedish Institute of Computer Science.
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
 * OF SUCH DAMAGE.
 *
 * This file is part of the lwIP TCP/IP stack.
 * 
 * Author: Adam Dunkels <adam@sics.se>
 *
 */
#ifndef __ARCH_CC_H__
#define __ARCH_CC_H__

#include <stdio.h>
#include <stdlib.h>
#include <xmc_common.h>
""")
for(ETH_LWIP eth_lwip_inst : appInstancesList)
{
if(eth_lwip_inst.gcheck_debug_en.value || eth_lwip_inst.gcheck_statistics_en.value || eth_lwip_inst.gcheck_assert_en.value)
{
	out.print("""
#include "SEGGER_RTT/SEGGER_RTT.h" """)
if(eth_lwip_inst.gcheck_debug_en.value || eth_lwip_inst.gcheck_statistics_en.value)
{
out.print("""
void ${eth_lwip_inst.getInstanceLabel()}_debug_msg(const char* msg, ...);""")
}
}
	out.print("""

#define LWIP_PROVIDE_ERRNO

/* Define platform endianness (might already be defined) */
#ifndef BYTE_ORDER
#define BYTE_ORDER LITTLE_ENDIAN
#endif /* BYTE_ORDER */

/* Define generic types used in lwIP */
typedef unsigned   char    u8_t;
typedef signed     char    s8_t;
typedef unsigned   short   u16_t;
typedef signed     short   s16_t;
typedef unsigned   long    u32_t;
typedef signed     long    s32_t;

typedef unsigned   long    mem_ptr_t;

/* Define (sn)printf formatters for these lwIP types */
#define X8_F  "02x"
#define U16_F "u"
#define S16_F "d"
#define X16_F "x"
#define U32_F "u"
#define S32_F "d"
#define X32_F "x"
#define SZT_F "u"

/* Compiler hints for packing structures */
#if defined ( __ICCARM__ )
#define PACK_STRUCT_FIELD(x) x
#define PACK_STRUCT_STRUCT
#define PACK_STRUCT_BEGIN __packed
#define PACK_STRUCT_END
#else
#define PACK_STRUCT_FIELD(x) x
#define PACK_STRUCT_STRUCT __attribute__((packed))
#define PACK_STRUCT_BEGIN
#define PACK_STRUCT_END
#endif
""")

if(eth_lwip_inst.gcheck_debug_en.value || eth_lwip_inst.gcheck_statistics_en.value)
{
	out.print("""
/* Plaform specific diagnostic output */
#define LWIP_PLATFORM_DIAG(x) do {${eth_lwip_inst.getInstanceLabel()}_debug_msg x ;} while(0)""")
}
else
{
	out.print("""
/* Plaform specific diagnostic output */
#define LWIP_PLATFORM_DIAG(x) do {XMC_DEBUG x;} while(0)""")
}

if(eth_lwip_inst.gcheck_assert_en.value)
{
out.print("""
#define LWIP_PLATFORM_ASSERT(x) do {${eth_lwip_inst.getInstanceLabel()}_debug_msg("Assertion \\"%s\\" failed at line %d in %s\\n", \\
                                     x, __LINE__, __FILE__);__BKPT(0);} while(0)""")
}
else
{
	out.print("""
#define LWIP_PLATFORM_ASSERT(x) do {XMC_DEBUG("Assertion \\"%s\\" failed at line %d in %s\\n", \\
                                     x, __LINE__, __FILE__);__BKPT(0);} while(0)""")
}
									 
}
out.print("""
#define LWIP_RAND() ((u32_t)rand())
#define LWIP_PLATFORM_HTONS(x) __REV16(x)
#define LWIP_PLATFORM_HTONL(x) __REV(x)

#if defined(__GNUC__)
void* thumb2_memcpy(void* pDest, const void* pSource, size_t length);
#endif

#endif /* __ARCH_CC_H__ */""")
