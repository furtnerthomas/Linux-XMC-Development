package Model.APPS.ETH_LWIP.v4_0_10.Templates;

import Model.APPS.ETH_LWIP.v4_0_10.ETH_LWIP

out.print("""
/*
 * Copyright (c) 2001-2003 Swedish Institute of Computer Science.
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
 * OF SUCH DAMAGE.
 *
 * This file is part of the lwIP TCP/IP stack.
 * 
 * Author: Adam Dunkels <adam@sics.se>
 *
 */
""")
for(ETH_LWIP eth_lwip_inst : appInstancesList)
{
	
	if(eth_lwip_inst.gcheck_rtos_en.value == true)
	{
out.print("""

#include <string.h>
#include "CMSIS_RTOS/cmsis_rtos.h"

#include "../include/lwip/opt.h"
#include "../include/lwip/sys.h"
#include "../include/lwip/stats.h"
#include "../include/lwip/debug.h"


#if !NO_SYS

err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
  osSemaphoreDef_t semaphoreDef;

  semaphoreDef.semaphore = sem->cb;
  memset(sem->cb, 0, sizeof(sem->cb));

  sem->id = osSemaphoreCreate(&semaphoreDef, count);

  if (sem->id == NULL)
  {
    return ERR_MEM;
  }
  else
  {
    return ERR_OK;
  }
}

void sys_sem_free(sys_sem_t *sem)
{
  if (sem->id != NULL)
  {
    osSemaphoreDelete(sem->id);
  }
}

u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
  int32_t  count;
  uint32_t tick;

  tick = osKernelSysTick();

  if (timeout == 0)
  {
    count = osSemaphoreWait(sem->id, osWaitForever);
  } else
  {
    count = osSemaphoreWait(sem->id, timeout);
  }

  if (count == 0)
  {
    return SYS_ARCH_TIMEOUT;
  }

  return ((1000U * (uint64_t)(osKernelSysTick() - tick)) / osKernelSysTickFrequency);
}

void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(sem->id);
}

err_t sys_mutex_new(sys_mutex_t *mutex)
{
  osMutexDef_t osMutexDef;

  osMutexDef.mutex = mutex->cb;
  memset(mutex->cb, 0, sizeof(mutex->cb));

  mutex->id = osMutexCreate(&osMutexDef);

  if (mutex->id == NULL)
  {
    return ERR_MEM;
  }
  else
  {
    return ERR_OK;
  }
}

void sys_mutex_free(sys_mutex_t *mutex)
{
  if (mutex->id != NULL)
  {
    osMutexDelete(mutex->id);
  }
}

void sys_mutex_lock(sys_mutex_t *mutex)
{
  osMutexWait(mutex->id, osWaitForever);
}

void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(mutex->id);
}

err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
  if (size > SYS_MBOX_SIZE) {
    return ERR_MEM;
  }

  osMessageQDef_t osMessageQDef;

  osMessageQDef.pool = mbox->q;
  osMessageQDef.queue_sz = SYS_MBOX_SIZE;
  memset(mbox->q, 0, sizeof(mbox->q));

  mbox->id = osMessageCreate(&osMessageQDef, NULL);

  if (mbox->id == NULL)
  {
    return ERR_MEM;
  }
  else
  {
    return ERR_OK;
  }
}

void sys_mbox_free(sys_mbox_t *mbox)
{
}

void sys_mbox_post(sys_mbox_t *mbox, void *msg)
{
  osMessagePut(mbox->id, (uint32_t)msg, osWaitForever);
}

err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  osStatus status;

  status = osMessagePut(mbox->id, (uint32_t)msg, 0);
  if (status != osOK)
  {
    return ERR_MEM;
  }
  return ERR_OK;
}

u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
  osEvent  event;
  uint32_t tick;

  tick = osKernelSysTick();
  if (timeout == 0)
  {
    event = osMessageGet(mbox->id, osWaitForever);
  } else
  {
    event = osMessageGet(mbox->id, timeout);
  }

  if (event.status != osEventMessage)
  {
    return SYS_ARCH_TIMEOUT;
  }

  if (msg != NULL)
  {
    *msg = event.value.p;
  }

  return ((1000 * (uint64_t)(osKernelSysTick() - tick)) / osKernelSysTickFrequency);
}

u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
  osEvent event;

  event = osMessageGet(mbox->id, 0);
  if (event.status != osEventMessage) {
    return SYS_MBOX_EMPTY;
  }

  if (msg != NULL) {
    *msg = event.value.p;
  }

  return ERR_OK;
}

sys_thread_t sys_thread_new(const char *name, lwip_thread_fn function, void *arg, int stacksize, int prio)
{
  LWIP_UNUSED_ARG(name);

  osThreadId threadId;
  osThreadDef_t threadDef;

  threadDef.pthread = (os_pthread)function;
  threadDef.tpriority = (osPriority)prio;
  threadDef.instances = 1;
  threadDef.stacksize = stacksize;

  threadId = osThreadCreate(&threadDef, arg);

  return threadId;
}

#if SYS_LIGHTWEIGHT_PROT

sys_mutex_t lwip_mutex;

sys_prot_t sys_arch_protect(void)
{
  sys_mutex_lock(&lwip_mutex);
  return 0;
}

void sys_arch_unprotect(sys_prot_t pval)
{
  LWIP_UNUSED_ARG(pval);
  sys_mutex_unlock(&lwip_mutex);
}

#endif /* SYS_LIGHTWEIGHT_PROT */


#endif /* !NO_SYS */


u32_t sys_now(void)
{
  return ((1000U * (uint64_t)osKernelSysTick()) / osKernelSysTickFrequency);
}

void sys_init(void)
{
#if !NO_SYS
#if SYS_LIGHTWEIGHT_PROT
  sys_mutex_new(&lwip_mutex);
#endif
#endif /* !NO_SYS */
}
""")
	}
	else
	{
		out.print("""
#include <SYSTIMER/systimer.h>
#include "include/arch/cc.h"
#include "../include/lwip/sys.h"


u32_t sys_now(void)
{""")
  if(eth_lwip_inst.appres_systimer.getVal(["ginteger_systickinterval", "value"]) != 1000)
  {
  out.print("""
  return (u32_t)(SYSTIMER_GetTickCount() * ${((Float)(eth_lwip_inst.appres_systimer.getVal(["ginteger_systickinterval", "value"])/1000)).round(2)}F);
""")
  }
  else
  {
  out.print("""
  return (u32_t)(SYSTIMER_GetTickCount());
""")
  }


out.print("""
}""")

	}
}