package Model.APPS.CLOCK_XMC4.v4_0_22.Templates;

import Model.APPS.CLOCK_XMC4.v4_0_22.CLOCK_XMC4

out.print("""
/**
 * @cond
 ***********************************************************************************************************************
 *
 * Copyright (c) 2015-2016, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 * 2015-02-16:
 *     - Initial version for DAVEv4. <BR>
 * 2015-05-08:
 *     - No functional change; Updated to adhere latest guidelines <br>
 * 2015-10-08:
 *     - Ensured Trap status bit clearing for XMC48 and XMC47 device.<br>
 *     - USB PLL Configuration made based on user configuration.<br>
 *     - ECAT Configuration supported for XMC48 device.<br>
 * 2015-10-20:
 *     - High Precision Oscillator Settings are enabled only when it is required.<br>
 * 2015-12-01:
 *     - Ensured Trap status bit clearing for XMC43 device.<br>
 * 2015-12-20:
 *     - Disabled option supported in combo box for High Precision Oscillator Settings.<br>
 * 2015-12-24:
 *     - TRAP event settings are moved to SystemCoreClockSetup API from CLOCK_XMC4_Init. <BR>
 *     - Code size is improved. <BR>
 *     - OSCHP_GetFrequency API is made to available to user only when high precision oscillator is used. <BR>
 * 2016-01-08:
 *     - Removed clear trap status settings at the end of the clock initialization which was redundant code.<br>
 * 2016-05-25:
 *     - Ensured main PLL and USBPLL dependencies based on its checkbox enable via CLOCK_XMC4 APP GUI.<br>
 * 2016-07-08:
 *     - Fixed incorrect case for an included header.<br>
 *
 * @endcond
 *
 */

/***********************************************************************************************************************
 * HEADER FILES
 **********************************************************************************************************************/
#include "clock_xmc4.h"
""");

 // Variable declaration
 String appInst = null

//************************************************************************************
//**    Conversion of GUI values into corresponding LLD Enumeration values   ***
//************************************************************************************
 Map sys_clk_src            = ["Main PLL Clock":"XMC_SCU_CLOCK_SYSCLKSRC_PLL", "Internal Fast Oscillator":"XMC_SCU_CLOCK_SYSCLKSRC_OFI"] //gcombo_sysclksrc
 Map mainpll_mode           = ["Normal Mode":"XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL","Prescaler Mode":"XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR"] //gcombo_mainpllset
 Map pll_clk_src            = ["External Crystal High Precision Oscillator":"XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP","Internal Fast Oscillator":"XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI"]//gcombo_pllclksrc
 Map wdt_clk_src            = ["Internal Fast Oscillator":"XMC_SCU_CLOCK_WDTCLKSRC_OFI","Standby Clock":"XMC_SCU_CLOCK_WDTCLKSRC_STDBY", "Main PLL Clock":"XMC_SCU_CLOCK_WDTCLKSRC_PLL"]//gcombo_pllclksrc
 Map rtc_clk_src            = ["External Crystal Ultra Low Power Oscillator":"XMC_SCU_HIB_RTCCLKSRC_ULP","Internal Slow Oscillator":"XMC_SCU_HIB_RTCCLKSRC_OSI"]//gcombo_pllclksrc
 Map standby_clk_src        = ["External Crystal Ultra Low Power Oscillator":"XMC_SCU_HIB_STDBYCLKSRC_OSCULP","Internal Slow Oscillator":"XMC_SCU_HIB_STDBYCLKSRC_OSI"]//gcombo_pllclksrc
 Map backup_clk_trimming_sel = ["Automatic Calibration Using Standby Clock":"XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC","Factory Calibration":"XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_FACTORY"] //gcombo_backupclktrim
 Map usb_clk_src            = ["USB PLL Clock":"XMC_SCU_CLOCK_USBCLKSRC_USBPLL","Main PLL Clock":"XMC_SCU_CLOCK_USBCLKSRC_SYSPLL","Standby Clock":"XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY"]//gcombo_usbclksrc
 Map ecat_clk_src            = ["USB PLL Clock":"XMC_SCU_CLOCK_ECATCLKSRC_USBPLL","Main PLL Clock":"XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL"]//gcombo_ecatclksrc
 Map ext_clkout_src         = ["System Clock":"XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS","USB PLL Clock":"XMC_SCU_CLOCK_EXTOUTCLKSRC_USB","Main PLL Clock":"XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL", "Standby Clock":"XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY"] //gcombo_extclkoutsrc
 int ext_clkout_pinmode_index
 List ext_clkout_pinalt_func  = ["XMC_GPIO_MODE_OUTPUT_PUSH_PULL", "XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1", "XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2", "XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3", "XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4", "XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT5", "XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT6", "XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT7"]
 List ext_clkout_pinstrength = ["XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE", "XMC_GPIO_OUTPUT_STRENGTH_STRONG_MEDIUM_EDGE", "XMC_GPIO_OUTPUT_STRENGTH_STRONG_SOFT_EDGE", "XMC_GPIO_OUTPUT_STRENGTH_STRONG_SLOW_EDGE", "XMC_GPIO_OUTPUT_STRENGTH_MEDIUM", "XMC_GPIO_OUTPUT_STRENGTH_WEAK"]
 int hwsel_hw

 // GGroup: Protocol Events
 List trap_events = [
	 "XMC_SCU_TRAP_OSC_WDG",
	 "XMC_SCU_TRAP_USB_VCO_LOCK",
	 "XMC_SCU_TRAP_VCO_LOCK",
	 "XMC_SCU_TRAP_ULP_WDG"
 ]
 
  // To identify the number of instances created in the project
 for (CLOCK_XMC4 Instance : appInstancesList) {
  appInst= Instance.getInstanceLabel()
  boolean is_any_trap_event_enabled =
  Instance.gcheck_osc_hp_oscillator_watchdog_trap_event.value ||			/**< XMC_SCU_TRAP_OSC_WDG*/
  Instance.gcheck_usb_vco_lock_trap_event.value ||			/**< XMC_SCU_TRAP_VCO_LOCK */
  Instance.gcheck_system_vco_lock_trap_event.value	||			/**< XMC_SCU_TRAP_USB_VCO_LOCK*/
  Instance.gcheck_osc_ulp_oscillator_watchdog_trap_event.value    /**< XMC_SCU_TRAP_ULP_WDG */
  
  List trap_events_selection =  /* specific trap events selected list */
  [
	  Instance.gcheck_osc_hp_oscillator_watchdog_trap_event.value,
	  Instance.gcheck_usb_vco_lock_trap_event.value,
	  Instance.gcheck_system_vco_lock_trap_event.value,
	  Instance.gcheck_osc_ulp_oscillator_watchdog_trap_event.value
  ]
  //******************************************************
  // Local variables which holds GUI check box actions
  //******************************************************
  // Calculation for osc_val derived from external oscillator frequency
  float osc_val = ((Instance.gfloat_extclkoscfreq.value * 1000000) / (2500000))-1
  int cpu_divider = (Instance.gint_cpuclkdiv.value)
  int capcom_divider = (Instance.gint_ccufreqdiv.value)
  int ebu_divider = (Instance.gint_ebufreqdiv.value)
  int peripheral_clk_divider = (Instance.gint_peribusdiv.value)
  int ext_clkout_enable = ((Instance.gcheck_extclkout.value)?1:0)
  
  int ccu_clock_enable = ((Instance.gcheck_enable_ccu_clock.value)?1:0)  
  int usb_clock_enable = ((Instance.gcheck_enable_usb_clock.value)?1:0)
  int wdt_clock_enable = ((Instance.gcheck_enable_wdt_clock.value)?1:0)
  int ebu_clock_enable = ((Instance.gcheck_enable_ebu_clock.value)?1:0)
  int ecat_clock_enable = ((Instance.gcheck_enable_ecat_clock.value)?1:0)
  
  float osc_freq = ((Instance.gfloat_extclkoscfreq.value) * 1000000)
  out.print("""
/**********************************************************************************************************************
 * DATA STRUCTURES
 **********************************************************************************************************************/""");

out.print("""
CLOCK_XMC4_t ${appInst} =
{
  .init_status = false
};
""");

out.print("""
 /**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/**
* @brief  Function to initialize the Clock Tree based on UI configuration
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
""");
if(ext_clkout_enable == 1){
out.print("""  /* Local data structure for initializing external clock out pin */
  const XMC_GPIO_CONFIG_t ${appInst}_extclk_config = {
    .mode = ${ext_clkout_pinalt_func.get((int)Instance.hwres_extclkpin.getRegValue("", "iocr_pcr"))},
    .output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE
  };
""");
	
	ext_clkout_pinmode_index = (int) Instance.hwres_extclkpin.getRegValue("", "iocr_oe")
	if(ext_clkout_pinmode_index == 1)
	{
		hwsel_hw = (int) Instance.hwres_extclkpin.getRegValue("", "hwsel_hw")
	}
	}
	

	out.print("""  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t ${appInst}_CONFIG =
  {""");
	if((Instance.gcombo_mainpllset.value == "Normal Mode") && (Instance.gcheck_enable_mainpll.value == true) && (Instance.gcombo_pllclksrc.enabled == true))
	{
	out.print("""
    /* N-Divider Value */
    .syspll_config.n_div = ${Instance.gint_mainpllndiv.value}U,
    /* P-Divider Value */
    .syspll_config.p_div = ${Instance.gint_mainpllpdiv.value}U,
    /* K2-Divider Value */
    .syspll_config.k_div = ${Instance.gint_mainpllk2div.value}U,""");
	}
	else
	{
	if((Instance.gcombo_mainpllset.value != "Normal Mode") && (Instance.gcheck_enable_mainpll.value == true) && (Instance.gcombo_pllclksrc.enabled == true))
	{
	out.print("""
    /* K1-Divider Value */
    .syspll_config.k_div = ${Instance.gint_mainpllk1div.value}U,""");
	}
	}
	if((Instance.gcheck_enable_mainpll.value == true) && (Instance.gcombo_pllclksrc.enabled == true))
	{
	out.print("""
    /* PLL Operating Mode */
    .syspll_config.mode = ${mainpll_mode.get(Instance.gcombo_mainpllset.value)},
    /* PLL Clock Source */
    .syspll_config.clksrc = ${pll_clk_src.get(Instance.gcombo_pllclksrc.value)},""");
	}
	else
	{
	out.print("""
    /* PLL Operating Mode */
    .syspll_config.mode = XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED,""");		
	}
	out.print("""
    /* High Precision Oscillator Operating Mode */
    .enable_oschp = ${(Instance.gcombo_extclkmode.value != "Disabled")},
    /* Ultra Low Power Oscillator Setting */
    .enable_osculp = ${(Instance.gcombo_rtcclksrc.value == "External Crystal Ultra Low Power Oscillator") || (Instance.gcombo_standbyclksrc.value == "External Crystal Ultra Low Power Oscillator")},""");
	out.print("""
    /* Calibration Mode */
    .calibration_mode = ${backup_clk_trimming_sel.get(Instance.gcombo_backupclktrim.value)},
    /* Standby Clock Source */
    .fstdby_clksrc = ${standby_clk_src.get(Instance.gcombo_standbyclksrc.value)},
    /* System Clock Source */
    .fsys_clksrc = ${sys_clk_src.get(Instance.gcombo_sysclksrc.value)},
    /* System Clock Divider Value */
    .fsys_clkdiv = ${Instance.gint_sysclkdiv.value}U,
    /* CPU Clock Divider Value */
    .fcpu_clkdiv = ${cpu_divider}U,
#ifdef CLOCK_XMC4_CCUCLK_ENABLED  
    /* CCU Clock Divider Value */
    .fccu_clkdiv = ${capcom_divider}U,
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = ${peripheral_clk_divider}U
  };
""");

if(ext_clkout_enable == 1)
{
out.print("""
  /* External output source clock */
  XMC_SCU_CLOCK_SetExternalOutputClockSource(${ext_clkout_src.get(Instance.gcombo_extclkoutsrc.value)});
  /* External clock divider setting */
  XMC_SCU_CLOCK_SetExternalOutputClockDivider(${Instance.gint_extclkplldiv.value}U);
  /* External clock output pin setting */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT${Instance.hwres_extclkpin.getSolverUri().get(4)}_BASE, ${Instance.hwres_extclkpin.getSolverUri().get(6)}U, &${appInst}_extclk_config);
""");
}

out.print("""  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&${appInst}_CONFIG);
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(${rtc_clk_src.get(Instance.gcombo_rtcclksrc.value)});
""");
if(Instance.ggroup_usbfreq.visible == true) 
{
out.print("""  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(${usb_clk_src.get(Instance.gcombo_usbclksrc.value)});
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(${Instance.gint_usbdiv.value}U);
#endif
""");
if( (Instance.gcheck_enable_usbpll.value == true) && (((Instance.gcombo_usbclksrc.value == "USB PLL Clock") && (Instance.ggroup_usbfreq.visible == true) && (Instance.gcheck_enable_usb_clock.value == true)) ||
    ((Instance.gcombo_ecatclksrc.value == "USB PLL Clock") && (Instance.ggroup_ecatfreq.visible == true) && (Instance.gcheck_enable_ecat_clock.value == true))) )
{

out.print("""  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(${Instance.gint_usbpll_pdiv.value}U, ${Instance.gint_usbpll_ndiv.value}U);
""");
}
}

if(Instance.ggroup_ecatfreq.visible == true)
{
out.print("""  
#ifdef CLOCK_XMC4_ECATCLK_ENABLED    
  /* ECAT source clock */
  XMC_SCU_CLOCK_SetECATClockSource(${ecat_clk_src.get(Instance.gcombo_ecatclksrc.value)});
  /* ECAT divider setting */
  XMC_SCU_CLOCK_SetECATClockDivider(${Instance.gint_ecatdiv.value}U);
#endif
""");
}

out.print("""
#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(${wdt_clk_src.get(Instance.gcombo_wdtclksrc.value)});
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(${Instance.ginteger_wdtclkdiv.value}U);
#endif
""");
if(Instance.ggroup_ebufreq.visible == true)
{
out.print("""
#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(${ebu_divider}U);
#endif
""");
}


if(is_any_trap_event_enabled) {
	
			int event_index = 0
			String clear_event_mask = ""
			String enable_event_mask = ""
			for(event_index = 0; event_index <= 5; event_index++)
			{
				if(trap_events_selection[event_index] == true) {
					if(clear_event_mask != "") {
						clear_event_mask += " |\n\t\t\t\t\t\t   "
					}
					clear_event_mask +=  trap_events[event_index]
				}
				
				if(trap_events_selection[event_index] == true) {
					if(enable_event_mask != "") {
						enable_event_mask += " |\n\t\t\t\t\t  "
					}
					enable_event_mask +=  trap_events[event_index]
				}
			}
			out.print("""
  /* Clear trap events before enabling them */""")
			out.print("""
  XMC_SCU_TRAP_ClearStatus(""")
			out.print(clear_event_mask)
			out.print(""");""")	
			
			out.print("""
  /* Enable configured trap events */""")
			out.print("""
  XMC_SCU_TRAP_Enable(""")
			out.print(enable_event_mask)
			out.print(""");""")
}

out.print("""
}
""");
 } /* End of for loop */