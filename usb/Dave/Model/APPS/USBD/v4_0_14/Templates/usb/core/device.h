/**
 * @file device.h
 * @date 2015-06-20 
 * NOTE:
 * This file is generated by DAVE. Any manual modification done to this file will be lost when the code is regenerated.
 *
 * @cond
 ***********************************************************************************************************************
 * The USB core driver for XMC4000 family of controllers. It does the USB protocol handling.
 *
 * Copyright (c) 2015, Infineon Technologies AG
 * All rights reserved.                        
 *                                             
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the           
 * following conditions are met:   
 *                                                                              
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following   
 *   disclaimer.                        
 * 
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the    
 *   following disclaimer in the documentation and/or other materials provided with the distribution.     
 *                         
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote 
 *   products derived from this software without specific prior written permission. 
 *                                             
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,  
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE   
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,  
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR        
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,      
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE   
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    
 *                                                                              
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes       
 * with Infineon Technologies AG (dave@infineon.com).        
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2015-02-16:
 *     - Initial version.      
 * 2015-06-20:
 *     - Updated the file header.
 *     
 * @endcond 
 *
 */
/*
  Copyright 2014  Dean Camera (dean [at] fourwalledcubicle [dot] com)

  Permission to use, copy, modify, distribute, and sell this
  software and its documentation for any purpose is hereby granted
  without fee, provided that the above copyright notice appear in
  all copies and that both that the copyright notice and this
  permission notice and warranty disclaimer appear in supporting
  documentation, and that the name of the author not be used in
  advertising or publicity pertaining to distribution of the
  software without specific, written prior permission.

  The author disclaims all warranties with regard to this
  software, including all implied warranties of merchantability
  and fitness.  In no event shall the author be liable for any
  special, indirect or consequential damages or any damages
  whatsoever resulting from loss of use, data or profits, whether
  in an action of contract, negligence or other tortious action,
  arising out of or in connection with the use or performance of
  this software.
*/


/**
 *  USB Device mode related definitions common to all architectures. This module
 *   contains definitions which are used when the USB controller is initialised
 *   in device mode.
 *
 */

#ifndef USBDEVICE_H
#define USBDEVICE_H

	/* Includes: */
		#include "../common/common.h"
		#include "usb_mode.h"
		#include "std_descriptors.h"
		#include "endpoint.h"

	/* Enable C linkage for C++ Compilers: */
		#if defined(__cplusplus)
			extern "C" {
		#endif
/**
 * @ingroup USBD_enumerations
 * @{
 */


			/** Enum for the various states of the USB Device state machine.
			 *  Only some states are implemented in the LUFA library - other
			 *  states are left to the user to implement.
			 *
			 *  For information on each possible USB device state, refer to the
			 *  USB 2.0 specification.
			 *
			 *  \see \ref USB_DeviceState, which stores the current device state
			 *   machine state.
			 */
			enum USB_Device_States_t
			{
				DEVICE_STATE_Unattached                   = 0, /**< Internally implemented by the library. This state indicates
				                                                *   that the device is not currently connected to a host.
				                                                */
				DEVICE_STATE_Powered                      = 1, /**< Internally implemented by the library. This state indicates
				                                                *   that the device is connected to a host, but enumeration has not
				                                                *   yet begun.
				                                                */
				DEVICE_STATE_Default                      = 2, /**< Internally implemented by the library. This state indicates
				                                                *   that the device's USB bus has been reset by the host and it is
				                                                *   now waiting for the host to begin the enumeration process.
				                                                */
				DEVICE_STATE_Addressed                    = 3, /**< Internally implemented by the library. This state indicates
				                                                *   that the device has been addressed by the USB Host, but is not
				                                                *   yet configured.
				                                                */
				DEVICE_STATE_Configured                   = 4, /**< May be implemented by the user project. This state indicates
				                                                *   that the device has been enumerated by the host and is ready
				                                                *   for USB communications to begin.
				                                                */
				DEVICE_STATE_Suspended                    = 5, /**< May be implemented by the user project. This state indicates
				                                                *   that the USB bus has been suspended by the host, and the device
				                                                *   should power down to a minimal power level until the bus is
				                                                *   resumed.
				                                                */
			};

/**
 * @}
 */


			/** Function to retrieve a given descriptor's size and memory
			 * location from the given descriptor type value, index and language
			 *  ID. This function MUST be overridden in the user application
			 *  (added with full, identical prototype and name so that the
			 *  library can call it to retrieve descriptor data.
			 *
			 *  \param[in] wValue  The type of the descriptor to retrieve in the
			 *  					 upper byte, and the index in the lower byte
			 *  					  (when more than one descriptor of the
			 *  					  given type exists, such as the case of
			 *  					  string descriptors). The type may be one
			 *  					  of the standard types defined in the
			 *  					  DescriptorTypes_t enum, or may be a class-
			 *  					  specific descriptor type value.
			 *  \param[in] wIndex    The language ID of the string to return if
			 *  					the \c wValue type indicates
			 *  					\ref DTYPE_String, otherwise zero for
			 *  					standard descriptors, or as defined in a
			 *  					class-specific standards.
			 *  \param[out] DescriptorAddress  Pointer to the descriptor in
			 *  								memory. This should be set by
			 *  								the routine to the address of
			 *  								the descriptor.
			 *
			 *  \return Size in bytes of the descriptor if it exists, zero otherwise.
			 */
			uint16_t CALLBACK_USB_GetDescriptor(
											const uint16_t wValue,
			                                const uint16_t wIndex, /* IFX */
			                                const void** const DescriptorAddress
			                                    );


#include "./xmc4000/usbd_device_xmc4000.h"

	/* Disable C linkage for C++ Compilers: */
		#if defined(__cplusplus)
			}
		#endif

#endif



