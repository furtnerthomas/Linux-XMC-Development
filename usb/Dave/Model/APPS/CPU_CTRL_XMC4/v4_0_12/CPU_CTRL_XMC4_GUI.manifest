package Model.APPS.CPU_CTRL_XMC4.v4_0_12;

// Import statements
import ifx.davex.app.manifest.*

abstract class CPU_CTRL_XMC4_GUI extends AppManifest {
	/* Begin : UI variable section */
	 public GInteger gint_preemptPriorityBits;
	 public GCombo gcombo_debuginterface;
	 public GCheck gcheck_disable_wr_buffer;
	 public GCheck gcheck_hardfault;
	 public GCheck gcheck_dividebyzero;
	 public GCheck gcheck_unaligned;
	 public GCheck gcheck_memmanage;
	 public GCheck gcheck_usage;
	 public GCheck gcheck_busfault;
	 public GCheck gcheck_mpu;
	 public GCheck gcheck_bgmemory;
	 public GCheck gcheck_enablempu_nmi;
	 public GInterruptPrio ginterruptprio_memmanage;
	 public GInterruptPrio ginterruptprio_usage;
	 public GInterruptPrio ginterruptprio_bus;
	 public GMessage gmessage_bgregion;
	 public GIndexCombo gindexcombo_memregion;
	 public GIndexGroup gindexgroup_memregion;
	 public RArray<Gindexgroup_memregion> rArraygindexgroup_memregion = RArray(8);


	 public CPU_CTRL_XMC4_GUI(DaveEnv daveEnv){

	 gint_preemptPriorityBits = GInteger(widgetName:"gint_preemptPriorityBits", value:6, minValue:0, maxValue:6, enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_debuginterface = GCombo(widgetName:"gcombo_debuginterface", options:["Disabled","JTAG","JTAG+nTRST","SWD","SWD+SWV","SWD+ETM"], value:"SWD", enabled:true, visible:true, isMandatoryValue:false)
	 gcheck_disable_wr_buffer = GCheck(widgetName:"gcheck_disable_wr_buffer", value:false, enabled:true, visible:true)
	 gcheck_hardfault = GCheck(widgetName:"gcheck_hardfault", value:false, enabled:true, visible:true)
	 gcheck_dividebyzero = GCheck(widgetName:"gcheck_dividebyzero", value:false, enabled:true, visible:true)
	 gcheck_unaligned = GCheck(widgetName:"gcheck_unaligned", value:false, enabled:true, visible:true)
	 gcheck_memmanage = GCheck(widgetName:"gcheck_memmanage", value:false, enabled:true, visible:true)
	 gcheck_usage = GCheck(widgetName:"gcheck_usage", value:false, enabled:true, visible:true)
	 gcheck_busfault = GCheck(widgetName:"gcheck_busfault", value:false, enabled:true, visible:true)
	 gcheck_mpu = GCheck(widgetName:"gcheck_mpu", value:false, enabled:true, visible:true)
	 gcheck_bgmemory = GCheck(widgetName:"gcheck_bgmemory", value:true, enabled:true, visible:true)
	 gcheck_enablempu_nmi = GCheck(widgetName:"gcheck_enablempu_nmi", value:false, enabled:true, visible:true)
	 ginterruptprio_memmanage = GInterruptPrio(widgetName:"ginterruptprio_memmanage", priorityValue:0, minPriority:0, maxPriority:63, subPriorityValue:0, minSubPriority:0, maxSubPriority:0, subPriorityVisible:true, enabled:true, visible:true)
	 ginterruptprio_usage = GInterruptPrio(widgetName:"ginterruptprio_usage", priorityValue:0, minPriority:0, maxPriority:63, subPriorityValue:0, minSubPriority:0, maxSubPriority:0, subPriorityVisible:true, enabled:true, visible:true)
	 ginterruptprio_bus = GInterruptPrio(widgetName:"ginterruptprio_bus", priorityValue:0, minPriority:0, maxPriority:63, subPriorityValue:0, minSubPriority:0, maxSubPriority:0, subPriorityVisible:true, enabled:true, visible:true)
	 gmessage_bgregion = GMessage(widgetName:"gmessage_bgregion", text:"Background region/any of the memory region must be enabled if MPU is enabled", isError:true, visible:true)
	 gindexcombo_memregion = GIndexCombo(widgetName:"gindexcombo_memregion", options:["0","1","2","3","4","5","6","7"], value:"0")
	 gindexgroup_memregion = GIndexGroup(widgetName:"gindexgroup_memregion", text:"Memory Region Editor", enabled:true, visible:true, gIndexCombo:gindexcombo_memregion, rArray:rArraygindexgroup_memregion)
	 for(int i=0; i<8; i++){
		rArraygindexgroup_memregion[i] = new Gindexgroup_memregion(daveEnv, "gindexgroup_memregion", i)
	 }


	 }
	/* End : UI variable section */
}
