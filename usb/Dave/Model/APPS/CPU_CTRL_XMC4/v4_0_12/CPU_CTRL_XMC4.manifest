package Model.APPS.CPU_CTRL_XMC4.v4_0_12;

/*
 Copyright (c) 2015, Infineon Technologies AG
 All rights reserved.
											
 Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 following conditions are met:
																			 
 Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 disclaimer.
  
 Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
 disclaimer in the documentation and/or other materials provided with the distribution.
  
 Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 products derived from this software without specific prior written permission.
																			 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
																			 
 To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes with
 Infineon Technologies AG: dave@infineon.com. */

/*************** Revision History **********************************************
 Version      Date          Description

  4.0.0       16-Feb-2015   Initial version for DAVE v4
  4.0.1       20-Apr-2015   documentation updated
  4.0.2       16-Jun-2015   version updated for public release
  4.0.4       02-Jul-2015   Preemption priority bits made as read-only
  4.0.8       14-Oct-2015   Support added for XMC4800 <br>
                            Added debug interface options, exception settings and MPU settings
  4.0.10      30-Oct-2015   Updated usage section      
  4.0.12      15-Dec-2015   Disable write buffer option added in general settings. <br>   
                            Support added for XMC4300
*******************************************************************************/
// Import statements
import ifx.davex.app.manifest.*

class  CPU_CTRL_XMC4 extends CPU_CTRL_XMC4_GUI {

	// Note  : Following App properties are mandatory and important
	// Begin : App property section
	def version            = '4.0.12'
	
	def categoriesDescription = ["System"]

	// Minimum DAVE version required for the App
	def minDaveVersion           = '4.0.0'
	
	// Keywords to search in Apps selection view
	def keywords      = [
		'CPU',
		'Exceptions',
		'Priority bits',
		'all'
	]
	
	def softwareIDs  = [		
	                     "XMC4.8.*.*.*":"1.0.0",
		                 "XMC4.7.*.*.*":"1.0.0",
		                 "XMC4.5.*.*.*":"1.0.0",
		                 "XMC4.3.*.*.*":"1.0.0",
		                 "XMC4.4.*.*.*":"1.0.0",
		                 "XMC4.2.*.*.*":"1.0.0",
		                 "XMC4.1.*.*.*":"1.0.0"
					   ]

	def singleton     = true
	def initProvider  = false
	def deprecated    = false
	def sharable      = true

	// App short description
	def description = "Defines the number of bits for priority grouping.\n Handles NMI, memmanage, usage, bus & hard fault exceptions and MPU settings."
		
	// End   : CPU property section
	
	// Begin : User variable section
	
	MVirtualResourceGroup hwres_exception_nmi
	MVirtualResourceGroup hwres_exception_hardfault
	MVirtualResourceGroup hwres_exception_memmanage
	MVirtualResourceGroup hwres_exception_busfault
	MVirtualResourceGroup hwres_exception_usagefault
	
	MVirtualResourceGroup hwres_jtag
	
	MVirtualResourceGroup hwres_jtag_tms
	MVirtualResourceGroup hwres_jtag_tdi
	MVirtualResourceGroup hwres_jtag_tdo
	MVirtualResourceGroup hwres_jtag_ntrst
	
	MVirtualResourceGroup hwres_swdclk
	MVirtualResourceGroup hwres_swdio
	MVirtualResourceGroup hwres_swo
	
	MVirtualResourceGroup hwres_port_pad_tms
	MVirtualResourceGroup hwres_port_pad_tck
	MVirtualResourceGroup hwres_port_pad_tdo
	MVirtualResourceGroup hwres_port_pad_tdi
	MVirtualResourceGroup hwres_port_pad_ntrst
	
	MVirtualResourceGroup hwres_port_pad_swd_tms
	MVirtualResourceGroup hwres_port_pad_swd_tck
	MVirtualResourceGroup hwres_port_pad_swd_tdo

	MVirtualResourceGroup hwres_port_pad_etm_traceclk
	MVirtualResourceGroup hwres_port_pad_etm_tracedata0
	MVirtualResourceGroup hwres_port_pad_etm_tracedata1
	MVirtualResourceGroup hwres_port_pad_etm_tracedata2
	MVirtualResourceGroup hwres_port_pad_etm_tracedata3
	
	MVirtualSignal vs_nmi_irq
	MVirtualSignal vs_jtag_tck
	MVirtualSignal vs_jtag_tms
	MVirtualSignal vs_jtag_tdi
	MVirtualSignal vs_jtag_tdo
	MVirtualSignal vs_jtag_ntrst
	MVirtualSignal vs_swdclk
	MVirtualSignal vs_swdio
	MVirtualSignal vs_swo
	
	MVirtualSignal vs_etm_traceclk
	MVirtualSignal vs_etm_tracedata0
	MVirtualSignal vs_etm_tracedata1
	MVirtualSignal vs_etm_tracedata2
	MVirtualSignal vs_etm_tracedata3
		
	/* Virtual signals for hw_o signals */
	MVirtualSignal vs_cpu_tdo_hw_o
	MVirtualSignal vs_cpu_tdo
	
	MVirtualSignal vs_cpu_swo
	MVirtualSignal vs_cpu_swo_hw_o
	
	MVirtualSignal vs_cpu_etm_traceclk_hw_o
	MVirtualSignal vs_cpu_etm_traceclk
	
	MVirtualSignal vs_cpu_etm_tracedata0_hw_o
	MVirtualSignal vs_cpu_etm_tracedata0
	MVirtualSignal vs_cpu_etm_tracedata1_hw_o
	MVirtualSignal vs_cpu_etm_tracedata1
	MVirtualSignal vs_cpu_etm_tracedata2_hw_o
	MVirtualSignal vs_cpu_etm_tracedata2
	MVirtualSignal vs_cpu_etm_tracedata3_hw_o
	MVirtualSignal vs_cpu_etm_tracedata3

	GInteger gint_maxInterruptPreemptPriority = GInteger(widgetName:"gint_maxInterruptPreemptPriority")
	GInteger gint_maxInterruptSubPriority = GInteger(widgetName:"gint_maxInterruptSubPriority")
	
	// End   : User variable section

	public CPU_CTRL_XMC4(DaveEnv daveEnv) {
		String family = daveEnv.project.selectedDevice.deviceId.family
		String series = daveEnv.project.selectedDevice.deviceId.series
		String pinpackage = daveEnv.project.selectedDevice.deviceId.icPackage
		
		int nvicbits = daveEnv.project.selectedDevice.nvicPrioBits
	
		gint_preemptPriorityBits.maxValue = [daveEnv.project.selectedDevice.nvicPrioBits, 7].min()
		gint_preemptPriorityBits.value = [daveEnv.project.selectedDevice.nvicPrioBits, 7].min()
		
		MF GetMaxPriorityValue = MF({
								   Integer Priority = ((1 << gint_preemptPriorityBits.value) - 1) as Integer
								   return Priority
								}, Integer)
		
		MF GetMaxSubPriorityValue = MF({
									Integer SubPriority = ((1 << (nvicbits - gint_preemptPriorityBits.value)) - 1) as Integer
									return SubPriority
								}, Integer)
		
		if(((family+series == 'XMC48') && (pinpackage == 'E196')) || 
		   ((family+series == 'XMC48') && (pinpackage == 'F144')) ||
		   ((family+series == 'XMC47') && (pinpackage == 'F144')) || 
		   ((family+series == 'XMC45') && (pinpackage == 'F144')) || 
		   ((family+series == 'XMC45') && (pinpackage == 'E144')) ||
		   ((family+series == 'XMC44') && (pinpackage == 'F100')))
		{
			/* SWD+ETM option is only available in XMC48/47/45/44 devices */
			gcombo_debuginterface.options = ["Disabled","JTAG","JTAG+nTRST","SWD","SWD+SWV","SWD+ETM"]
		}
		else
		{
			gcombo_debuginterface.options = ["Disabled","JTAG","JTAG+nTRST","SWD","SWD+SWV"]
		}
		
		rArraygindexgroup_memregion[0].gcheck_memregion.enabled = MF({gcheck_mpu.value},Boolean)
		rArraygindexgroup_memregion[1].gcheck_memregion.enabled = MF({gcheck_mpu.value},Boolean)
		rArraygindexgroup_memregion[2].gcheck_memregion.enabled = MF({gcheck_mpu.value},Boolean)
		rArraygindexgroup_memregion[3].gcheck_memregion.enabled = MF({gcheck_mpu.value},Boolean)
		rArraygindexgroup_memregion[4].gcheck_memregion.enabled = MF({gcheck_mpu.value},Boolean)
		rArraygindexgroup_memregion[5].gcheck_memregion.enabled = MF({gcheck_mpu.value},Boolean)
		rArraygindexgroup_memregion[6].gcheck_memregion.enabled = MF({gcheck_mpu.value},Boolean)
		rArraygindexgroup_memregion[7].gcheck_memregion.enabled = MF({gcheck_mpu.value},Boolean)
 
		MF IsMemRegion_0_Enabled = MF({(rArraygindexgroup_memregion[0].gcheck_memregion.value)}, Boolean)
		MF IsMemRegion_1_Enabled = MF({(rArraygindexgroup_memregion[1].gcheck_memregion.value)}, Boolean)
		MF IsMemRegion_2_Enabled = MF({(rArraygindexgroup_memregion[2].gcheck_memregion.value)}, Boolean)
		MF IsMemRegion_3_Enabled = MF({(rArraygindexgroup_memregion[3].gcheck_memregion.value)}, Boolean)
		MF IsMemRegion_4_Enabled = MF({(rArraygindexgroup_memregion[4].gcheck_memregion.value)}, Boolean)
		MF IsMemRegion_5_Enabled = MF({(rArraygindexgroup_memregion[5].gcheck_memregion.value)}, Boolean)
		MF IsMemRegion_6_Enabled = MF({(rArraygindexgroup_memregion[6].gcheck_memregion.value)}, Boolean)
		MF IsMemRegion_7_Enabled = MF({(rArraygindexgroup_memregion[7].gcheck_memregion.value)}, Boolean)
		
		MF IsMemRegion_0_Enabled_And_CheckSize = MF({
														if((rArraygindexgroup_memregion[0].gcheck_memregion.value == true) &&
														   ((rArraygindexgroup_memregion[0].gcombo_size.value != "32B") &&
															(rArraygindexgroup_memregion[0].gcombo_size.value != "64B") &&
															(rArraygindexgroup_memregion[0].gcombo_size.value != "128B")))
														{
														  true
														}
														else
														{
														  false
														}
													  }, Boolean)
		
		MF IsMemRegion_1_Enabled_And_CheckSize = MF({
														if((rArraygindexgroup_memregion[1].gcheck_memregion.value == true) &&
														   ((rArraygindexgroup_memregion[1].gcombo_size.value != "32B") &&
															(rArraygindexgroup_memregion[1].gcombo_size.value != "64B") &&
															(rArraygindexgroup_memregion[1].gcombo_size.value != "128B")))
														{
														  true
														}
														else
														{
														  false
														}
													  }, Boolean)

		MF IsMemRegion_2_Enabled_And_CheckSize = MF({
														if((rArraygindexgroup_memregion[2].gcheck_memregion.value == true) &&
														   ((rArraygindexgroup_memregion[2].gcombo_size.value != "32B") &&
															(rArraygindexgroup_memregion[2].gcombo_size.value != "64B") &&
															(rArraygindexgroup_memregion[2].gcombo_size.value != "128B")))
														{
														  true
														}
														else
														{
														  false
														}
													  }, Boolean)

		MF IsMemRegion_3_Enabled_And_CheckSize = MF({
														if((rArraygindexgroup_memregion[3].gcheck_memregion.value == true) &&
														   ((rArraygindexgroup_memregion[3].gcombo_size.value != "32B") &&
															(rArraygindexgroup_memregion[3].gcombo_size.value != "64B") &&
															(rArraygindexgroup_memregion[3].gcombo_size.value != "128B")))
														{
														  true
														}
														else
														{
														  false
														}
													  }, Boolean)

		MF IsMemRegion_4_Enabled_And_CheckSize = MF({
														if((rArraygindexgroup_memregion[4].gcheck_memregion.value == true) &&
														   ((rArraygindexgroup_memregion[4].gcombo_size.value != "32B") &&
															(rArraygindexgroup_memregion[4].gcombo_size.value != "64B") &&
															(rArraygindexgroup_memregion[4].gcombo_size.value != "128B")))
														{
														  true
														}
														else
														{
														  false
														}
													  }, Boolean)
		
		MF IsMemRegion_5_Enabled_And_CheckSize = MF({
														if((rArraygindexgroup_memregion[5].gcheck_memregion.value == true) &&
														   ((rArraygindexgroup_memregion[5].gcombo_size.value != "32B") &&
															(rArraygindexgroup_memregion[5].gcombo_size.value != "64B") &&
															(rArraygindexgroup_memregion[5].gcombo_size.value != "128B")))
														{
														  true
														}
														else
														{
														  false
														}
													  }, Boolean)
		
		MF IsMemRegion_6_Enabled_And_CheckSize = MF({
														if((rArraygindexgroup_memregion[6].gcheck_memregion.value == true) &&
														   ((rArraygindexgroup_memregion[6].gcombo_size.value != "32B") &&
															(rArraygindexgroup_memregion[6].gcombo_size.value != "64B") &&
															(rArraygindexgroup_memregion[6].gcombo_size.value != "128B")))
														{
														  true
														}
														else
														{
														  false
														}
													  }, Boolean)
		
		MF IsMemRegion_7_Enabled_And_CheckSize = MF({
														if((rArraygindexgroup_memregion[7].gcheck_memregion.value == true) &&
														   ((rArraygindexgroup_memregion[7].gcombo_size.value != "32B") &&
															(rArraygindexgroup_memregion[7].gcombo_size.value != "64B") &&
															(rArraygindexgroup_memregion[7].gcombo_size.value != "128B")))
														{
														  true
														}
														else
														{
														  false
														}
													  }, Boolean)
		
		MF IsJTAG_Or_JTAGnTRST_Selected = MF({(gcombo_debuginterface.value == "JTAG") || (gcombo_debuginterface.value== "JTAG+nTRST")},Boolean)
		
		MF IsETMSelected = MF({(gcombo_debuginterface.value == "SWD+ETM")},Boolean)
		
		MF IsSWDSelected = MF({((gcombo_debuginterface.value== "SWD") || 
								(gcombo_debuginterface.value== "SWD+SWV") ||
								(gcombo_debuginterface.value== "SWD+ETM"))
							  }, Boolean)


		/* calculate max value for preemption priority */
		gint_maxInterruptPreemptPriority.value = GetMaxPriorityValue
		
		/* calculate max value for sub priority */
		gint_maxInterruptSubPriority.value = GetMaxSubPriorityValue
		
		hwres_exception_nmi =  MVirtualResourceGroup("nmi_exception", ["peripheral", "cpu", "0", "exception", "nmi"])

		/* assign the virtual resource group to virtual signal along with the signal */
		vs_nmi_irq = MVirtualSignal(hwres_exception_nmi, "nmi_irq", "nmi_in")
		
		hwres_exception_hardfault =  MVirtualResourceGroup("hardfault_exception", ["peripheral", "cpu", "0", "exception", "hardfault"])
		hwres_exception_memmanage =  MVirtualResourceGroup("memmanagefault_exception", ["peripheral", "cpu", "0", "exception", "memmanage"])
		hwres_exception_busfault =  MVirtualResourceGroup("busfault_exception", ["peripheral", "cpu", "0", "exception", "busfault"])
		hwres_exception_usagefault =  MVirtualResourceGroup("usagefault_exception", ["peripheral", "cpu", "0", "exception", "usagefault"])

		hwres_jtag = MVirtualResourceGroup("jtag",["peripheral","cpu","0","debug"], IsJTAG_Or_JTAGnTRST_Selected)
		vs_jtag_tck = MVirtualSignal(hwres_jtag, "jtag tck", "db_tck", IsJTAG_Or_JTAGnTRST_Selected)
		vs_jtag_tms = MVirtualSignal(hwres_jtag, "jtag tms", "db_tms", IsJTAG_Or_JTAGnTRST_Selected)
		vs_jtag_tdi = MVirtualSignal(hwres_jtag, "jtag tdi", "db_tdi", IsJTAG_Or_JTAGnTRST_Selected)

		vs_jtag_tdo = MVirtualSignal(hwres_jtag, "jtag tdo", "db_tdo_traceswo", IsJTAG_Or_JTAGnTRST_Selected,false)
		
		vs_jtag_ntrst = MVirtualSignal(hwres_jtag, "jtag ntrst", "db_trst", MF({(gcombo_debuginterface.value== "JTAG+nTRST")}, Boolean))

		hwres_swdclk = MVirtualResourceGroup("swd",["peripheral","cpu","0","debug"], IsSWDSelected)
		
		vs_swdclk = MVirtualSignal(hwres_swdclk, "swd clk", "db_tck", IsSWDSelected)
		vs_swdio = MVirtualSignal(hwres_swdclk, "swd io", "db_tms", IsSWDSelected)
		vs_swo = MVirtualSignal(hwres_swdclk, "swo", "db_tdo_traceswo", MF({(gcombo_debuginterface.value== "SWD+SWV")}, Boolean))
		
		vs_etm_traceclk = MVirtualSignal(hwres_swdclk, "swd etm traceclk", "db_etm_traceclk", IsETMSelected)
		
		vs_etm_tracedata0 = MVirtualSignal(hwres_swdclk, "swd etm tracedata0", "db_etm_tracedata0", IsETMSelected)
		vs_etm_tracedata1 = MVirtualSignal(hwres_swdclk, "swd etm tracedata1", "db_etm_tracedata1", IsETMSelected)
		vs_etm_tracedata2 = MVirtualSignal(hwres_swdclk, "swd etm tracedata2", "db_etm_tracedata2", IsETMSelected)
		vs_etm_tracedata3 = MVirtualSignal(hwres_swdclk, "swd etm tracedata3", "db_etm_tracedata3", IsETMSelected)

		/* Pad resource groups */		
		hwres_port_pad_tdo = MVirtualResourceGroup("jtag tdo",["port","p","*","pad","*"], IsJTAG_Or_JTAGnTRST_Selected)
		hwres_port_pad_tck = MVirtualResourceGroup("jtag tck",["port","debug_port","*","pad","*"], IsJTAG_Or_JTAGnTRST_Selected)
		hwres_port_pad_tms = MVirtualResourceGroup("jtag tms",["port","debug_port","*","pad","*"], IsJTAG_Or_JTAGnTRST_Selected)
		hwres_port_pad_tdi = MVirtualResourceGroup("jtag tdi",["port","p","0","pad","7"], IsJTAG_Or_JTAGnTRST_Selected)
		hwres_port_pad_ntrst = MVirtualResourceGroup("jtag ntrst", ["port","p","0","pad","8"], MF({(gcombo_debuginterface.value== "JTAG+nTRST")}, Boolean))

		hwres_port_pad_swd_tdo = MVirtualResourceGroup("swo",["port","p","*","pad","*"], MF({(gcombo_debuginterface.value== "SWD+SWV")},Boolean))
		hwres_port_pad_swd_tck = MVirtualResourceGroup("swd clk",["port","debug_port","*","pad","*"], IsSWDSelected)
		hwres_port_pad_swd_tms = MVirtualResourceGroup("swd io",["port","debug_port","*","pad","*"], IsSWDSelected)
		
    	hwres_port_pad_etm_traceclk = MVirtualResourceGroup("swd etm traceclk",["port","p","*","pad","*"], IsETMSelected)
		hwres_port_pad_etm_tracedata0 = MVirtualResourceGroup("swd etm tracedata0",["port","p","*","pad","*"], IsETMSelected)
		hwres_port_pad_etm_tracedata1 = MVirtualResourceGroup("swd etm tracedata1",["port","p","*","pad","*"], IsETMSelected)
		hwres_port_pad_etm_tracedata2 = MVirtualResourceGroup("swd etm tracedata2",["port","p","*","pad","*"], IsETMSelected)
		hwres_port_pad_etm_tracedata3 = MVirtualResourceGroup("swd etm tracedata3",["port","p","*","pad","*"], IsETMSelected)

		/* Hardware control mode selection */
		addRegisterBitFieldConstraint( hwres_port_pad_tdo, "iocr_oe", MF({[1]}, List), IsJTAG_Or_JTAGnTRST_Selected)
		addRegisterBitFieldConstraint( hwres_port_pad_swd_tdo, "iocr_oe", MF({[1]}, List), MF({(gcombo_debuginterface.value== "SWD+SWV")},Boolean))
		addRegisterBitFieldConstraint( hwres_port_pad_etm_traceclk, "iocr_oe", MF({[1]}, List), IsETMSelected)
		addRegisterBitFieldConstraint( hwres_port_pad_etm_tracedata0, "iocr_oe", MF({[1]}, List), IsETMSelected)
		addRegisterBitFieldConstraint( hwres_port_pad_etm_tracedata1, "iocr_oe", MF({[1]}, List), IsETMSelected)
		addRegisterBitFieldConstraint( hwres_port_pad_etm_tracedata2, "iocr_oe", MF({[1]}, List), IsETMSelected)
		addRegisterBitFieldConstraint( hwres_port_pad_etm_tracedata3, "iocr_oe", MF({[1]}, List), IsETMSelected)
		
		/* Set the driver strength of these pins to Strong sharp edge[A2 speed class] */
		addResourcePropertyConstraint(hwres_port_pad_etm_traceclk, "speed_class of rg_property", ['A2'], IsETMSelected)
		addResourcePropertyConstraint(hwres_port_pad_etm_tracedata0, "speed_class of rg_property", ['A2'], IsETMSelected)
		addResourcePropertyConstraint(hwres_port_pad_etm_tracedata1, "speed_class of rg_property", ['A2'], IsETMSelected)
		addResourcePropertyConstraint(hwres_port_pad_etm_tracedata2, "speed_class of rg_property", ['A2'], IsETMSelected)
		addResourcePropertyConstraint(hwres_port_pad_etm_tracedata3, "speed_class of rg_property", ['A2'], IsETMSelected)
		
		@AddPin
		vs_cpu_tdo =  MVirtualSignal( hwres_port_pad_tdo,"tdo_pad", "pad",IsJTAG_Or_JTAGnTRST_Selected,false)
		vs_cpu_tdo_hw_o  =  MVirtualSignal( hwres_port_pad_tdo,"tdo_hw_o", "hw_o",IsJTAG_Or_JTAGnTRST_Selected,false)

		@AddPin
		vs_cpu_swo =  MVirtualSignal( hwres_port_pad_swd_tdo,"swo_pad", "pad",MF({(gcombo_debuginterface.value== "SWD+SWV")},Boolean),false)
		vs_cpu_swo_hw_o  =  MVirtualSignal( hwres_port_pad_swd_tdo,"swo_hw_o", "hw_o",MF({(gcombo_debuginterface.value== "SWD+SWV")},Boolean),false)
		
		@AddPin
		vs_cpu_etm_traceclk =  MVirtualSignal( hwres_port_pad_etm_traceclk,"etm_traceclk_pad", "pad",IsETMSelected,false)
		vs_cpu_etm_traceclk_hw_o  =  MVirtualSignal( hwres_port_pad_etm_traceclk,"etm_traceclk_hw_o", "hw_o",IsETMSelected,false)

		@AddPin
		vs_cpu_etm_tracedata0 =  MVirtualSignal( hwres_port_pad_etm_tracedata0,"etm_tracedata0_pad", "pad",IsETMSelected,false)
		vs_cpu_etm_tracedata0_hw_o  =  MVirtualSignal( hwres_port_pad_etm_tracedata0,"etm_tracedata0_hw_o", "hw_o",IsETMSelected,false)

		@AddPin
		vs_cpu_etm_tracedata1 =  MVirtualSignal( hwres_port_pad_etm_tracedata1,"etm_tracedata1_pad", "pad",IsETMSelected,false)
		vs_cpu_etm_tracedata1_hw_o  =  MVirtualSignal( hwres_port_pad_etm_tracedata1,"etm_tracedata1_hw_o", "hw_o",IsETMSelected,false)

		@AddPin
		vs_cpu_etm_tracedata2 =  MVirtualSignal( hwres_port_pad_etm_tracedata2,"etm_tracedata2_pad", "pad",IsETMSelected,false)
		vs_cpu_etm_tracedata2_hw_o  =  MVirtualSignal( hwres_port_pad_etm_tracedata2,"etm_tracedata2_hw_o", "hw_o",IsETMSelected,false)

		@AddPin
		vs_cpu_etm_tracedata3 =  MVirtualSignal( hwres_port_pad_etm_tracedata3,"etm_tracedata3_pad", "pad",IsETMSelected,false)
		vs_cpu_etm_tracedata3_hw_o  =  MVirtualSignal( hwres_port_pad_etm_tracedata3,"etm_tracedata3_hw_o", "hw_o",IsETMSelected,false)

    	addConnectionConstraint(vs_jtag_tdo, vs_cpu_tdo_hw_o, IsJTAG_Or_JTAGnTRST_Selected)
		
		addConnectionConstraint(vs_swo, vs_cpu_swo_hw_o, MF({(gcombo_debuginterface.value== "SWD+SWV")},Boolean))
		
		addConnectionConstraint(vs_etm_traceclk, vs_cpu_etm_traceclk_hw_o, MF({(gcombo_debuginterface.value == "SWD+ETM")},Boolean))
		addConnectionConstraint(vs_etm_tracedata0, vs_cpu_etm_tracedata0_hw_o, MF({(gcombo_debuginterface.value == "SWD+ETM")},Boolean))
		addConnectionConstraint(vs_etm_tracedata1, vs_cpu_etm_tracedata1_hw_o, MF({(gcombo_debuginterface.value == "SWD+ETM")},Boolean))
		addConnectionConstraint(vs_etm_tracedata2, vs_cpu_etm_tracedata2_hw_o, MF({(gcombo_debuginterface.value == "SWD+ETM")},Boolean))
		addConnectionConstraint(vs_etm_tracedata3, vs_cpu_etm_tracedata3_hw_o, MF({(gcombo_debuginterface.value == "SWD+ETM")},Boolean))
		
		ginterruptprio_memmanage.maxPriority = GetMaxPriorityValue
		ginterruptprio_memmanage.maxSubPriority =  GetMaxSubPriorityValue
	//	ginterruptprio_memmanage.enabled = MF({(gcheck_memmanage.value)},Boolean)

		ginterruptprio_usage.maxPriority = GetMaxPriorityValue
		ginterruptprio_usage.maxSubPriority = GetMaxSubPriorityValue
	//    ginterruptprio_usage.enabled = MF({(gcheck_usage.value)},Boolean)
						 
		ginterruptprio_bus.maxPriority = GetMaxPriorityValue
		ginterruptprio_bus.maxSubPriority = GetMaxSubPriorityValue
	//	ginterruptprio_bus.enabled = MF({(gcheck_busfault.value)},Boolean)
		
		/* If "Enable MPU" is selected, then only enable the "Disable MPU" option and "Enable background memory region" */
		gcheck_enablempu_nmi.enabled = MF({gcheck_mpu.value},Boolean)
		gcheck_bgmemory.enabled = MF({gcheck_mpu.value},Boolean)
		
		// enable MPU editor fields only if MPU is enabled
		gindexgroup_memregion.enabled = MF({gcheck_mpu.value},Boolean)
		
		rArraygindexgroup_memregion[0].ginteger_startaddr.enabled = IsMemRegion_0_Enabled
		rArraygindexgroup_memregion[1].ginteger_startaddr.enabled = IsMemRegion_1_Enabled
		rArraygindexgroup_memregion[2].ginteger_startaddr.enabled = IsMemRegion_2_Enabled
		rArraygindexgroup_memregion[3].ginteger_startaddr.enabled = IsMemRegion_3_Enabled
		rArraygindexgroup_memregion[4].ginteger_startaddr.enabled = IsMemRegion_4_Enabled
		rArraygindexgroup_memregion[5].ginteger_startaddr.enabled = IsMemRegion_5_Enabled
		rArraygindexgroup_memregion[6].ginteger_startaddr.enabled = IsMemRegion_6_Enabled
		rArraygindexgroup_memregion[7].ginteger_startaddr.enabled = IsMemRegion_7_Enabled
	
		rArraygindexgroup_memregion[0].gcombo_size.enabled = IsMemRegion_0_Enabled
		rArraygindexgroup_memregion[1].gcombo_size.enabled = IsMemRegion_1_Enabled
		rArraygindexgroup_memregion[2].gcombo_size.enabled = IsMemRegion_2_Enabled
		rArraygindexgroup_memregion[3].gcombo_size.enabled = IsMemRegion_3_Enabled
		rArraygindexgroup_memregion[4].gcombo_size.enabled = IsMemRegion_4_Enabled
		rArraygindexgroup_memregion[5].gcombo_size.enabled = IsMemRegion_5_Enabled
		rArraygindexgroup_memregion[6].gcombo_size.enabled = IsMemRegion_6_Enabled
		rArraygindexgroup_memregion[7].gcombo_size.enabled = IsMemRegion_7_Enabled
		
		rArraygindexgroup_memregion[0].ginteger_subregion.enabled = IsMemRegion_0_Enabled_And_CheckSize
		rArraygindexgroup_memregion[1].ginteger_subregion.enabled = IsMemRegion_1_Enabled_And_CheckSize
		rArraygindexgroup_memregion[2].ginteger_subregion.enabled = IsMemRegion_2_Enabled_And_CheckSize
		rArraygindexgroup_memregion[3].ginteger_subregion.enabled = IsMemRegion_3_Enabled_And_CheckSize
		rArraygindexgroup_memregion[4].ginteger_subregion.enabled = IsMemRegion_4_Enabled_And_CheckSize
		rArraygindexgroup_memregion[5].ginteger_subregion.enabled = IsMemRegion_5_Enabled_And_CheckSize
		rArraygindexgroup_memregion[6].ginteger_subregion.enabled = IsMemRegion_6_Enabled_And_CheckSize
		rArraygindexgroup_memregion[7].ginteger_subregion.enabled = IsMemRegion_7_Enabled_And_CheckSize
		
		rArraygindexgroup_memregion[0].gcombo_type.enabled = IsMemRegion_0_Enabled
		rArraygindexgroup_memregion[1].gcombo_type.enabled = IsMemRegion_1_Enabled
		rArraygindexgroup_memregion[2].gcombo_type.enabled = IsMemRegion_2_Enabled
		rArraygindexgroup_memregion[3].gcombo_type.enabled = IsMemRegion_3_Enabled
		rArraygindexgroup_memregion[4].gcombo_type.enabled = IsMemRegion_4_Enabled
		rArraygindexgroup_memregion[5].gcombo_type.enabled = IsMemRegion_5_Enabled
		rArraygindexgroup_memregion[6].gcombo_type.enabled = IsMemRegion_6_Enabled
		rArraygindexgroup_memregion[7].gcombo_type.enabled = IsMemRegion_7_Enabled
		
		rArraygindexgroup_memregion[0].gcombo_accessper.enabled = IsMemRegion_0_Enabled
		rArraygindexgroup_memregion[1].gcombo_accessper.enabled = IsMemRegion_1_Enabled
		rArraygindexgroup_memregion[2].gcombo_accessper.enabled = IsMemRegion_2_Enabled
		rArraygindexgroup_memregion[3].gcombo_accessper.enabled = IsMemRegion_3_Enabled
		rArraygindexgroup_memregion[4].gcombo_accessper.enabled = IsMemRegion_4_Enabled
		rArraygindexgroup_memregion[5].gcombo_accessper.enabled = IsMemRegion_5_Enabled
		rArraygindexgroup_memregion[6].gcombo_accessper.enabled = IsMemRegion_6_Enabled
		rArraygindexgroup_memregion[7].gcombo_accessper.enabled = IsMemRegion_7_Enabled

		rArraygindexgroup_memregion[0].gcombo_codeexec.enabled = IsMemRegion_0_Enabled
		rArraygindexgroup_memregion[1].gcombo_codeexec.enabled = IsMemRegion_1_Enabled
		rArraygindexgroup_memregion[2].gcombo_codeexec.enabled = IsMemRegion_2_Enabled
		rArraygindexgroup_memregion[3].gcombo_codeexec.enabled = IsMemRegion_3_Enabled
		rArraygindexgroup_memregion[4].gcombo_codeexec.enabled = IsMemRegion_4_Enabled
		rArraygindexgroup_memregion[5].gcombo_codeexec.enabled = IsMemRegion_5_Enabled
		rArraygindexgroup_memregion[6].gcombo_codeexec.enabled = IsMemRegion_6_Enabled
		rArraygindexgroup_memregion[7].gcombo_codeexec.enabled = IsMemRegion_7_Enabled

		gmessage_bgregion.visible = MF({
										 if((gcheck_mpu.value == false ) || (gcheck_bgmemory.value == true) || 
											   (rArraygindexgroup_memregion[0].gcheck_memregion.value == true) ||
											   (rArraygindexgroup_memregion[1].gcheck_memregion.value == true) ||
										       (rArraygindexgroup_memregion[2].gcheck_memregion.value == true) ||
											   (rArraygindexgroup_memregion[3].gcheck_memregion.value == true) ||
											   (rArraygindexgroup_memregion[4].gcheck_memregion.value == true) ||
											   (rArraygindexgroup_memregion[5].gcheck_memregion.value == true) ||
											   (rArraygindexgroup_memregion[6].gcheck_memregion.value == true) ||
											   (rArraygindexgroup_memregion[7].gcheck_memregion.value == true))
										{
										  false
										}
										else
										{
										  true
										}} ,Boolean)
	}
	
	// File Generation
	def generateFiles(){
		copy("cpu_ctrl_xmc4.c", "cpu_ctrl_xmc4.c")
		copy("cpu_ctrl_xmc4.h", "cpu_ctrl_xmc4.h")
		generate("cpu_ctrl_xmc4_confc.tmpl", "cpu_ctrl_xmc4_conf.c")
		generate("cpu_ctrl_xmc4_confh.tmpl", "cpu_ctrl_xmc4_conf.h")
		generate("cpu_ctrl_xmc4_externh.tmpl", "cpu_ctrl_xmc4_extern.h")
	}

}

